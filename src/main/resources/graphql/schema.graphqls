type Query {
    getAllProducts: [Product]
    getProductById(id: ID): Product
    getProductByName(name: String): [Product]
    obtenerTransportes: [Transporte]
    obtenerTransportePorId(id: ID): Transporte
    obtenerTransportesPorNombre(nombre: String): [Transporte]
}

# type Mutation {
#     createProduct(name: String!, description: String, price: Float): Product
#      crearTransporte(transporte: Transporte): Transporte
# }


enum TipoTransporte {
    AEREO
    TERRESTRE
    ACUATICO
}

enum EstadoServicio {
    DISPONIBLE
    NO_DISPONIBLE
    SUSPENDIDO
}


type Product {
    id: ID
    name: String
    description: String
    price: Float
}


type Calificacion {
    idCalificacion: ID
    titulo: String
    descripcion: String
    reputacion: Int
    servicio: Servicio 
}


interface Servicio {
    idServicio: ID
    nombre: String
    descripcion: String
    estado: EstadoServicio
    foto: String
    fotosDescripcion: [String]
    calificaciones: [Calificacion] 
}


type Transporte implements Servicio {
    idServicio: ID
    nombre: String
    descripcion: String
    estado: EstadoServicio
    foto: String
    fotosDescripcion: [String]
    calificaciones: [Calificacion] # Relaci√≥n heredada desde Servicio
    tipoTransporte: TipoTransporte
    fechaSalida: String
    fechaLlegada: String
    capacidad: Int
    costoPorPasajero: Float
    origenLatitud: Float
    origenLongitud: Float
    destinoLatitud: Float
    destinoLongitud: Float
}


